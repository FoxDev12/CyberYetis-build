{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tonio\\\\Desktop\\\\frost website clean original in case i break stuff lol\\\\src\\\\store\\\\BlockchainContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport { providers } from \"../utils/Web3Provider\";\nimport { ABI, NFTABI, PoolABI } from \"../utils/abi\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlockchainContext = /*#__PURE__*/createContext({\n  notification: null,\n  showModal: function () {},\n  hideModal: function () {}\n});\nexport const BlockchainContextProvider = props => {\n  _s();\n\n  // Init\n  const [provider, setProvider] = useState();\n  const [web3Instance, setWeb3Instance] = useState();\n  const [web3Modal, setWeb3Modal] = useState();\n  const [Contract, setContract] = useState();\n  const [NFTContract, setNFTContract] = useState();\n  const [mutantsContract, setMutantsContract] = useState();\n  const [poolContract, setPoolContract] = useState();\n  const [account, setAccount] = useState(); // Token balance\n\n  const [walletBalance, setWalletBalance] = useState(\"0.00000\");\n  const [ischange, setIschange] = useState(true); // NFT bals\n\n  const [babiesStaked, setBabiesStaked] = useState('0');\n  const [mutantsStaked, setMutantsStaked] = useState('0');\n  const [babiesStakedByUser, setBabiesStakedByUser] = useState('0');\n  const [mutantsStakedByUser, setMutantsStakedByUser] = useState('0');\n  const [unstakedBabies, setUnstakedBabies] = useState();\n  const [unstakedMutants, setUnstakedMutants] = useState();\n  const [frostApproveStatus, setFrostApproveStatus] = useState(false);\n  const [approveStatus, setApproveStatus] = useState(false);\n  const [mutantsApproveStatus, setMutantsApproveStatus] = useState(false);\n  const [babiesReward, setBabiesReward] = useState(0);\n  const [mutantsReward, setMutantsReward] = useState(0);\n  const [rewardPerday, setRewardPerday] = useState('0');\n  const [constantReward, setConstantReward] = useState('0');\n  useEffect(() => {\n    connectToWallet('noWallet');\n  }, []);\n  useEffect(() => {\n    if (provider && account && web3Instance.currentProvider.isMetaMask === true && ischange) {\n      setIschange(false);\n      provider.on(\"accountsChanged\", accounts => {\n        fetchDataFromContract(web3Instance, accounts[0]);\n        accounts.length > 0 && setAccount(accounts[0]);\n      });\n    }\n  });\n\n  const connectToWallet = async type => {\n    if (type === \"noWallet\") {\n      const web3 = new Web3(process.env.REACT_APP_RPF_NODE);\n      const contractInstance = new web3.eth.Contract(ABI, \"0xdE64d7C22b44c1FA436f48bA3F309d24b7E4665B\");\n      const nftcontractInstance = new web3.eth.Contract(NFTABI, \"0xF0A7dC7DA3eeD849bDf78Fc0Fc513E1B4EAC11D5\");\n      const mutantsContractInstance = new web3.eth.Contract(NFTABI, \"0xfABf2a39A94ADE3c12A0ebF9A70f3cc4E738169A\");\n      const poolInstance = new web3.eth.Contract(PoolABI, \"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\");\n      setContract(contractInstance);\n      setNFTContract(nftcontractInstance);\n      setMutantsContract(mutantsContractInstance);\n      setPoolContract(poolInstance);\n      setWeb3Instance(web3);\n      setProvider(provider);\n      fetchDataFromContract(web3, null);\n    } else {\n      const web3Modal = new Web3Modal({\n        cacheProvider: true,\n        providerOptions: providers,\n        theme: \"dark\"\n      });\n      let provider;\n      await web3Modal.connect(web3Modal).then(res => {\n        provider = res;\n      }).catch(err => {\n        provider = process.env.REACT_APP_RPF_NODE;\n      });\n      const web3 = new Web3(provider);\n      const account = await web3.eth.getAccounts();\n      const contractInstance = new web3.eth.Contract(ABI, \"0xdE64d7C22b44c1FA436f48bA3F309d24b7E4665B\");\n      const nftcontractInstance = new web3.eth.Contract(NFTABI, \"0xF0A7dC7DA3eeD849bDf78Fc0Fc513E1B4EAC11D5\");\n      const mutantsContractInstance = new web3.eth.Contract(NFTABI, \"0xfABf2a39A94ADE3c12A0ebF9A70f3cc4E738169A\");\n      const poolInstance = new web3.eth.Contract(PoolABI, \"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\");\n      setContract(contractInstance);\n      setNFTContract(nftcontractInstance);\n      setMutantsContract(mutantsContractInstance);\n      setPoolContract(poolInstance);\n      account.length > 0 && setAccount(account[0]);\n      setWeb3Instance(web3);\n      setProvider(provider);\n      setWeb3Modal(web3Modal);\n      fetchDataFromContract(web3, account[0]);\n      localStorage.setItem('account', account[0]);\n    }\n  };\n\n  const fetchDataFromContract = async (web3, account) => {\n    // Total Staked \n    if (Contract && NFTContract && !account) {\n      await poolContract.methods.totalBabiesStaked().call((error, result) => {\n        if (!error) {\n          setBabiesStaked(result);\n        }\n      });\n      await poolContract.methods.totalMutantsStaked().call((error, result) => {\n        if (!error) {\n          setMutantsStaked(result);\n        }\n      });\n    }\n\n    if (Contract && account && NFTContract) {\n      // Total Staked \n      await poolContract.methods.totalBabiesStaked().call((error, result) => {\n        if (!error) {\n          setBabiesStaked(result);\n        }\n      });\n      await poolContract.methods.totalMutantsStaked().call((error, result) => {\n        if (!error) {\n          setMutantsStaked(result);\n        }\n      }); // User frost balance\n\n      await Contract.methods.balanceOf(account).call((error, result) => {\n        if (!error) {\n          setWalletBalance(web3.utils.fromWei(result));\n        }\n      }); // Babies staked\n\n      await poolContract.methods.babiesOfOwner(account).call(async (error, result) => {\n        if (!error) {\n          setBabiesStakedByUser(result);\n          await poolContract.methods.frostRate().call((error, rew) => {\n            if (!error) {\n              const finalRewardPerday = result * rew;\n              setRewardPerday(web3.utils.fromWei(finalRewardPerday.toString()));\n              setConstantReward(web3.utils.fromWei(rew));\n            }\n          });\n        }\n      }); // Mutants staked\n\n      await poolContract.methods.mutantsOfOwner(account).call(async (error, result) => {\n        if (!error) {\n          setMutantsStakedByUser(result);\n        }\n      }); // GÃ©Pa\n      // await contract.methods.amountOfStakers().call((error, result) => {\n      //   if (!error) {\n      //     setOwnerCount(result)\n      //   }\n      // });\n\n      await NFTContract.methods.walletOfOwner(account).call((error, result) => {\n        if (!error) {\n          setUnstakedBabies(result);\n        }\n      });\n      await mutantsContract.methods.walletOfOwner(account).call((error, result) => {\n        if (!error) {\n          setUnstakedMutants(result);\n        }\n      });\n      checkEnable(web3, account);\n      pendingHarvest(web3, account);\n    }\n  };\n\n  const pendingHarvest = async (web3, account) => {\n    if (account) {\n      await poolContract.methods.babiesOfOwner(account).call((error, result) => {\n        if (!error) {\n          result && result.map(async item => {\n            console.log('here ', item);\n            await poolContract.methods.claimableFrostForBabies(account, item).call((error, res) => {\n              if (!error) {\n                console.log('yes', res);\n                setBabiesReward(old => old + +web3.utils.fromWei(res));\n              }\n            });\n          });\n        }\n      });\n      await poolContract.methods.mutantsOfOwner(account).call((error, result) => {\n        if (!error) {\n          result && result.map(async item => {\n            console.log('here ', item);\n            await poolContract.methods.claimableFrostForMutants(account, item).call((error, res) => {\n              if (!error) {\n                console.log('yes', res);\n                setMutantsReward(old => old + +web3.utils.fromWei(res));\n              }\n            });\n          });\n        }\n      });\n    }\n  };\n\n  const invest = async tokenId => {\n    if (account) {\n      await poolContract.methods.addBabiesToPool(tokenId).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Stake Successfully\");\n        fetchDataFromContract(web3Instance, account);\n      });\n    }\n  };\n\n  const investMutants = async tokenId => {\n    if (account) {\n      await poolContract.methods.addMutantsToPool(tokenId).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Stake Successfully\");\n        fetchDataFromContract(web3Instance, account);\n      });\n    }\n  };\n\n  const investAll = async () => {\n    if (account) {\n      console.log(unstakedBabies);\n      await poolContract.methods.addBabiesToPool(unstakedBabies).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Stake Successfully\");\n        fetchDataFromContract(web3Instance, account);\n      });\n    }\n  };\n\n  const investAllMutants = async () => {\n    if (account) {\n      console.log(unstakedMutants);\n      await poolContract.methods.addMutantsToPool(unstakedMutants).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Stake Successfully\");\n        fetchDataFromContract(web3Instance, account);\n      });\n    }\n  };\n\n  const withdraw = async () => {\n    if (account) {\n      await poolContract.methods.claimBabiesFromPool(babiesStakedByUser, false).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Wait for chainlink! Check your wallet again in a few minutes\");\n        fetchDataFromContract(web3Instance, account);\n      });\n    }\n  };\n\n  const withdrawMutants = async () => {\n    if (account) {\n      await poolContract.methods.claimMutantsFromPool(mutantsStakedByUser, false).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Claim Successfully\");\n        fetchDataFromContract(web3Instance, account);\n      });\n    }\n  };\n\n  const unStake = async tokenId => {\n    if (account) {\n      await poolContract.methods.claimBabiesFromPool(tokenId, true).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Wait for chainlink! Check your wallet again in a few minutes\");\n        fetchDataFromContract(web3Instance, account);\n      });\n    }\n  };\n\n  const unStakeAll = async () => {\n    if (account) {\n      await poolContract.methods.claimBabiesFromPool(babiesStakedByUser).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Wait for chainlink! Check your wallet again in a few minutes\");\n        fetchDataFromContract(web3Instance, account);\n      });\n    }\n  };\n\n  const unStakeMutant = async tokenId => {\n    if (account) {\n      await poolContract.methods.claimMutantsFromPool(tokenId, true).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Wait for chainlink! Check your wallet again in a few minutes\");\n        fetchDataFromContract(web3Instance, account);\n      });\n    }\n  };\n\n  const unStakeAllMutants = async () => {\n    if (account) {\n      await poolContract.methods.claimMutantsFromPool(mutantsStakedByUser).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Wait for chainlink! Check your wallet again in a few minutes\");\n        fetchDataFromContract(web3Instance, account);\n      });\n    }\n  };\n\n  const disconnectWallet = async () => {\n    await web3Modal.clearCachedProvider();\n    setAccount(null);\n    localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n    localStorage.removeItem(\"walletconnect\");\n    localStorage.removeItem(\"account\");\n    setProvider(null);\n  };\n\n  const approveYourself = async () => {\n    if (account) {\n      if (NFTContract && account) {\n        try {\n          NFTContract.methods.setApprovalForAll(\"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\", true).send({\n            from: account\n          }, (error, result) => {\n            if (!error) {}\n          }).on(\"receipt\", receipt => {\n            toast.success(\"Enable Successfully\");\n            setApproveStatus(true);\n          }).on(\"error\", err => {\n            toast.error(err);\n          });\n        } catch (error) {\n          console.log(\"Failed: \" + error);\n        }\n      }\n    } else {//toast.error(\"Please connect to your wallet\");\n    }\n  };\n\n  const approveMutants = async () => {\n    if (account) {\n      if (mutantsContract && account) {\n        try {\n          mutantsContract.methods.setApprovalForAll(\"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\", true).send({\n            from: account\n          }, (error, result) => {\n            if (!error) {}\n          }).on(\"receipt\", receipt => {\n            toast.success(\"Enable Successfully\");\n            setApproveStatus(true);\n          }).on(\"error\", err => {\n            toast.error(err);\n          });\n        } catch (error) {\n          console.log(\"Failed: \" + error);\n        }\n      }\n    } else {//toast.error(\"Please connect to your wallet\");\n    }\n  };\n\n  const approveFrost = async () => {\n    if (Contract && account) {\n      try {\n        Contract.methods.approve(\"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\", Web3.utils.toWei(20000000000, 'ether')).send({\n          from: account\n        }, (error, result) => {\n          if (!error) {}\n        }).on(\"receipt\", receipt => {\n          toast.success(\"Enable Successfully\");\n          setApproveStatus(true);\n        }).on(\"error\", err => {\n          toast.error(err);\n        });\n      } catch (error) {\n        console.log(\"Failed: \" + error);\n      }\n    }\n  };\n\n  const checkEnable = async (web3, account) => {\n    await NFTContract.methods.isApprovedForAll(account, \"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\").call((error, result) => {\n      if (!error) {\n        if (result > 0) {\n          setApproveStatus(true);\n          console.log('is approve');\n        } else {\n          setApproveStatus(false);\n          console.log('not approve');\n        }\n      }\n    });\n    await mutantsContract.methods.isApprovedForAll(account, \"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\").call((error, result) => {\n      if (!error) {\n        if (result > 0) {\n          setMutantsApproveStatus(true);\n          console.log('is approve mutants');\n        } else {\n          setMutantsApproveStatus(false);\n          console.log('not approve mutants');\n        }\n      }\n    });\n    await Contract.methods.allowance(account, \"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\").call((error, result) => {\n      if (!error) {\n        if (result > web3.utils.toWei(100, 'ether')) {\n          setFrostApproveStatus(true);\n          console.log('is approve frost');\n        } else {\n          setFrostApproveStatus(false);\n          console.log('not approve frost');\n        }\n      }\n    });\n  };\n\n  const context = {\n    provider: provider,\n    web3Instance: web3Instance,\n    Contract: Contract,\n    account: account,\n    handleConnectToWallet: connectToWallet,\n    handleDisconnectWallet: disconnectWallet,\n    invest: invest,\n    investMutants: investMutants,\n    withdraw: withdraw,\n    withdrawMutants: withdrawMutants,\n    approveYourself: approveYourself,\n    approveMutants: approveMutants,\n    approveFrost: approveFrost,\n    checkEnable: checkEnable,\n    unStake: unStake,\n    unStakeMutant: unStakeMutant,\n    investAll: investAll,\n    investAllMutants: investAllMutants,\n    unStakeAll: unStakeAll,\n    unStakeAllMutants: unStakeAllMutants,\n    walletBalance: walletBalance,\n    babiesStaked: babiesStaked,\n    babiesStakedByUser: babiesStakedByUser,\n    mutantsStaked: mutantsStaked,\n    mutantsStakedByUser: mutantsStakedByUser,\n    approveStatus: approveStatus,\n    mutantsApproveStatus: mutantsApproveStatus,\n    frostApproveStatus: frostApproveStatus,\n    unstakedBabies: unstakedBabies,\n    unstakedMutants: unstakedMutants,\n    babiesReward: babiesReward,\n    mutantsReward: mutantsReward,\n    rewardPerday: rewardPerday,\n    constantReward: constantReward\n  };\n  return /*#__PURE__*/_jsxDEV(BlockchainContext.Provider, {\n    value: context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 580,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BlockchainContextProvider, \"SmxwVvE6LsyTGyAPuh2/Zo4GLpk=\");\n\n_c = BlockchainContextProvider;\nexport default BlockchainContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlockchainContextProvider\");","map":{"version":3,"sources":["C:/Users/Tonio/Desktop/frost website clean original in case i break stuff lol/src/store/BlockchainContext.js"],"names":["createContext","useState","useEffect","Web3","Web3Modal","providers","ABI","NFTABI","PoolABI","toast","BlockchainContext","notification","showModal","hideModal","BlockchainContextProvider","props","provider","setProvider","web3Instance","setWeb3Instance","web3Modal","setWeb3Modal","Contract","setContract","NFTContract","setNFTContract","mutantsContract","setMutantsContract","poolContract","setPoolContract","account","setAccount","walletBalance","setWalletBalance","ischange","setIschange","babiesStaked","setBabiesStaked","mutantsStaked","setMutantsStaked","babiesStakedByUser","setBabiesStakedByUser","mutantsStakedByUser","setMutantsStakedByUser","unstakedBabies","setUnstakedBabies","unstakedMutants","setUnstakedMutants","frostApproveStatus","setFrostApproveStatus","approveStatus","setApproveStatus","mutantsApproveStatus","setMutantsApproveStatus","babiesReward","setBabiesReward","mutantsReward","setMutantsReward","rewardPerday","setRewardPerday","constantReward","setConstantReward","connectToWallet","currentProvider","isMetaMask","on","accounts","fetchDataFromContract","length","type","web3","process","env","REACT_APP_RPF_NODE","contractInstance","eth","nftcontractInstance","mutantsContractInstance","poolInstance","cacheProvider","providerOptions","theme","connect","then","res","catch","err","getAccounts","localStorage","setItem","methods","totalBabiesStaked","call","error","result","totalMutantsStaked","balanceOf","utils","fromWei","babiesOfOwner","frostRate","rew","finalRewardPerday","toString","mutantsOfOwner","walletOfOwner","checkEnable","pendingHarvest","map","item","console","log","claimableFrostForBabies","old","claimableFrostForMutants","invest","tokenId","addBabiesToPool","send","from","receipt","success","investMutants","addMutantsToPool","investAll","investAllMutants","withdraw","claimBabiesFromPool","withdrawMutants","claimMutantsFromPool","unStake","unStakeAll","unStakeMutant","unStakeAllMutants","disconnectWallet","clearCachedProvider","removeItem","approveYourself","setApprovalForAll","approveMutants","approveFrost","approve","toWei","isApprovedForAll","allowance","context","handleConnectToWallet","handleDisconnectWallet","children"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport { providers } from \"../utils/Web3Provider\";\nimport { ABI, NFTABI, PoolABI } from \"../utils/abi\";\nimport { toast } from \"react-toastify\";\n\nconst BlockchainContext = createContext({\n  notification: null,\n  showModal: function () { },\n  hideModal: function () { },\n});\n\nexport const BlockchainContextProvider = (props) => {\n  // Init\n  const [provider, setProvider] = useState();\n  const [web3Instance, setWeb3Instance] = useState();\n  const [web3Modal, setWeb3Modal] = useState();\n  const [Contract, setContract] = useState();\n  const [NFTContract, setNFTContract] = useState();\n  const [mutantsContract, setMutantsContract] = useState()\n  const [poolContract, setPoolContract] = useState()\n\n  const [account, setAccount] = useState();\n  // Token balance\n  const [walletBalance, setWalletBalance] = useState(\"0.00000\");\n  const [ischange, setIschange] = useState(true)\n  \n  // NFT bals\n  const [babiesStaked, setBabiesStaked] = useState('0')\n  const [mutantsStaked, setMutantsStaked] = useState('0')\n\n  const [babiesStakedByUser, setBabiesStakedByUser] = useState('0')\n  const [mutantsStakedByUser, setMutantsStakedByUser] = useState('0')\n\n  const [unstakedBabies, setUnstakedBabies] = useState()\n  const [unstakedMutants, setUnstakedMutants] = useState()\n  const [frostApproveStatus, setFrostApproveStatus] = useState(false)\n  const [approveStatus, setApproveStatus] = useState(false)\n  const [mutantsApproveStatus, setMutantsApproveStatus] = useState(false)\n\n  const [babiesReward, setBabiesReward] = useState(0)\n  const [mutantsReward, setMutantsReward] = useState(0)\n  const [rewardPerday, setRewardPerday] = useState('0')\n  const [constantReward, setConstantReward] = useState('0')\n\n\n\n\n\nuseEffect(()=>{\n  connectToWallet('noWallet')\n},[])\n  useEffect(() => {\n    if (provider && account && web3Instance.currentProvider.isMetaMask === true && ischange) {\n      setIschange(false)\n      provider.on(\"accountsChanged\", (accounts) => {\n        fetchDataFromContract(web3Instance, accounts[0]);\n        accounts.length > 0 && setAccount(accounts[0]);\n      });\n    }\n  });\n\n  const connectToWallet = async (type) => {\n    if (type === \"noWallet\") {\n      const web3 = new Web3(process.env.REACT_APP_RPF_NODE);\n      const contractInstance = new web3.eth.Contract(\n        ABI,\n        \"0xdE64d7C22b44c1FA436f48bA3F309d24b7E4665B\"\n      );\n      const nftcontractInstance = new web3.eth.Contract(\n        NFTABI,\n        \"0xF0A7dC7DA3eeD849bDf78Fc0Fc513E1B4EAC11D5\"\n        );\n      const mutantsContractInstance = new web3.eth.Contract(\n        NFTABI,\n        \"0xfABf2a39A94ADE3c12A0ebF9A70f3cc4E738169A\"\n        );\n        const poolInstance = new web3.eth.Contract(\n        PoolABI,\n        \"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\"\n        )\n      setContract(contractInstance);\n      setNFTContract(nftcontractInstance);\n      setMutantsContract(mutantsContractInstance);\n      setPoolContract(poolInstance); \n      setWeb3Instance(web3);\n      setProvider(provider);\n      fetchDataFromContract(web3, null);\n    } else {\n      const web3Modal = new Web3Modal({\n        cacheProvider: true,\n        providerOptions: providers,\n        theme: \"dark\",\n      });\n      let provider;\n      await web3Modal\n        .connect(web3Modal)\n        .then((res) => {\n          provider = res;\n        })\n        .catch((err) => {\n          provider = process.env.REACT_APP_RPF_NODE;\n        });\n      const web3 = new Web3(provider);\n      const account = await web3.eth.getAccounts();\n      const contractInstance = new web3.eth.Contract(\n        ABI,\n        \"0xdE64d7C22b44c1FA436f48bA3F309d24b7E4665B\"\n      );\n      const nftcontractInstance = new web3.eth.Contract(\n        NFTABI,\n        \"0xF0A7dC7DA3eeD849bDf78Fc0Fc513E1B4EAC11D5\"\n        );\n      const mutantsContractInstance = new web3.eth.Contract(\n        NFTABI,\n        \"0xfABf2a39A94ADE3c12A0ebF9A70f3cc4E738169A\"\n        );\n        const poolInstance = new web3.eth.Contract(\n        PoolABI,\n        \"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\"\n        )\n      setContract(contractInstance);\n      setNFTContract(nftcontractInstance);\n      setMutantsContract(mutantsContractInstance);\n      setPoolContract(poolInstance);\n      account.length > 0 && setAccount(account[0]);\n      setWeb3Instance(web3);\n      setProvider(provider);\n      setWeb3Modal(web3Modal);\n      fetchDataFromContract(web3, account[0]);\n      localStorage.setItem('account', account[0])\n    }\n\n  };\n\n  const fetchDataFromContract = async (web3, account) => {\n    // Total Staked \n    if (Contract && NFTContract && !account) {\n      await poolContract.methods.totalBabiesStaked().call((error, result) => {\n        if (!error) {\n          setBabiesStaked(result)\n        }\n      });\n      await poolContract.methods.totalMutantsStaked().call((error, result) => {\n        if (!error) {\n          setMutantsStaked(result)\n        }\n      });\n\n    }\n\n    if (Contract && account && NFTContract) {\n          // Total Staked \n      await poolContract.methods.totalBabiesStaked().call((error, result) => {\n        if (!error) {\n          setBabiesStaked(result)\n        }\n      });\n      await poolContract.methods.totalMutantsStaked().call((error, result) => {\n        if (!error) {\n          setMutantsStaked(result)\n        }\n      });\n      // User frost balance\n      await Contract.methods.balanceOf(account).call((error, result) => {\n        if (!error) {\n          setWalletBalance(web3.utils.fromWei(result))\n        }\n      });\n      // Babies staked\n      await poolContract.methods.babiesOfOwner(account).call(async(error, result) => {\n        if (!error) {\n          setBabiesStakedByUser(result)\n          await poolContract.methods.frostRate().call((error, rew) => {\n            if (!error) {\n              const finalRewardPerday = result * rew\n              setRewardPerday(web3.utils.fromWei(finalRewardPerday.toString()))\n              setConstantReward(web3.utils.fromWei(rew))\n            }\n          });\n        }\n      });\n      // Mutants staked\n      await poolContract.methods.mutantsOfOwner(account).call(async(error, result) => {\n        if (!error) {\n          setMutantsStakedByUser(result)\n        }\n      });\n      \n      // GÃ©Pa\n      // await contract.methods.amountOfStakers().call((error, result) => {\n      //   if (!error) {\n      //     setOwnerCount(result)\n      //   }\n      // });\n      \n\n      await NFTContract.methods.walletOfOwner(account).call((error, result) => {\n        if (!error) {\n          setUnstakedBabies(result)\n        }\n      });\n      await mutantsContract.methods.walletOfOwner(account).call((error, result) => {\n        if (!error) {\n          setUnstakedMutants(result)\n        }\n      });\n\n      checkEnable(web3, account)\n      pendingHarvest(web3, account)\n    }\n  };\n\n  const pendingHarvest = async (web3, account) => {\n    if (account) {\n      await poolContract.methods.babiesOfOwner(account).call((error, result) => {\n        if (!error) {\n          result && result.map(async (item) => {\n            console.log('here ', item)\n            await poolContract.methods.claimableFrostForBabies(account,item).call((error, res) => {\n              if (!error) {\n                console.log('yes', res)\n                setBabiesReward(old => old + +(web3.utils.fromWei(res)))\n              }\n            });\n          })\n        }\n      });\n      await poolContract.methods.mutantsOfOwner(account).call((error, result) => {\n        if (!error) {\n          result && result.map(async (item) => {\n            console.log('here ', item)\n            await poolContract.methods.claimableFrostForMutants(account,item).call((error, res) => {\n              if (!error) {\n                console.log('yes', res)\n                setMutantsReward(old => old + +(web3.utils.fromWei(res)))\n              }\n            });\n          })\n        }\n      });\n    }\n  };\n\n\n  const invest = async (tokenId) => {\n    if (account) {\n      await poolContract.methods\n        .addBabiesToPool(tokenId)\n        .send(\n          { from: account },\n          (error, result) => {\n            if (!error) {\n            }\n          }\n        )\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Stake Successfully\");\n          fetchDataFromContract(web3Instance, account);\n        });\n    }\n  };\n  const investMutants = async (tokenId) => {\n    if (account) {\n      await poolContract.methods\n        .addMutantsToPool(tokenId)\n        .send(\n          { from: account },\n          (error, result) => {\n            if (!error) {\n            }\n          }\n        )\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Stake Successfully\");\n          fetchDataFromContract(web3Instance, account);\n        });\n    }\n  };\n\n  const investAll = async () => {\n    if (account) {\n      console.log(unstakedBabies)\n      await poolContract.methods\n        .addBabiesToPool(unstakedBabies)\n        .send(\n          { from: account },\n          (error, result) => {\n            if (!error) {\n            }\n          }\n        )\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Stake Successfully\");\n          fetchDataFromContract(web3Instance, account);\n        });\n    }\n  };\n  const investAllMutants = async () => {\n    if (account) {\n      console.log(unstakedMutants)\n      await poolContract.methods\n        .addMutantsToPool(unstakedMutants)\n        .send(\n          { from: account },\n          (error, result) => {\n            if (!error) {\n            }\n          }\n        )\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Stake Successfully\");\n          fetchDataFromContract(web3Instance, account);\n        });\n    }\n  };\n\n  const withdraw = async () => {\n    if (account) {\n      await poolContract.methods\n        .claimBabiesFromPool(babiesStakedByUser, false)\n        .send({ from: account }, (error, result) => {\n          if (!error) {\n          }\n        })\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Wait for chainlink! Check your wallet again in a few minutes\");\n          fetchDataFromContract(web3Instance, account);\n        });\n    }\n  };\n  const withdrawMutants = async () => {\n    if (account) {\n      await poolContract.methods\n        .claimMutantsFromPool(mutantsStakedByUser, false)\n        .send({ from: account }, (error, result) => {\n          if (!error) {\n          }\n        })\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Claim Successfully\");\n          fetchDataFromContract(web3Instance, account);\n        });\n    }\n  };\n\n  const unStake = async (tokenId) => {\n    if (account) {\n      await poolContract.methods\n        .claimBabiesFromPool(tokenId, true)\n        .send({ from: account }, (error, result) => {\n          if (!error) {\n          }\n        })\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Wait for chainlink! Check your wallet again in a few minutes\");\n          fetchDataFromContract(web3Instance, account);\n        });\n    }\n  };\n\n  const unStakeAll = async () => {\n    if (account) {\n      await poolContract.methods\n        .claimBabiesFromPool(babiesStakedByUser)\n        .send({ from: account }, (error, result) => {\n          if (!error) {\n          }\n        })\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Wait for chainlink! Check your wallet again in a few minutes\");\n          fetchDataFromContract(web3Instance, account);\n        });\n    }\n  };\n  const unStakeMutant = async (tokenId) => {\n    if (account) {\n      await poolContract.methods\n        .claimMutantsFromPool(tokenId, true)\n        .send({ from: account }, (error, result) => {\n          if (!error) {\n          }\n        })\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Wait for chainlink! Check your wallet again in a few minutes\");\n          fetchDataFromContract(web3Instance, account);\n        });\n    }\n  };\n\n  const unStakeAllMutants = async () => {\n    if (account) {\n      await poolContract.methods\n        .claimMutantsFromPool(mutantsStakedByUser)\n        .send({ from: account }, (error, result) => {\n          if (!error) {\n          }\n        })\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Wait for chainlink! Check your wallet again in a few minutes\");\n          fetchDataFromContract(web3Instance, account);\n        });\n    }\n  };\n\n\n  const disconnectWallet = async () => {\n    await web3Modal.clearCachedProvider();\n    setAccount(null);\n    localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n    localStorage.removeItem(\"walletconnect\");\n    localStorage.removeItem(\"account\")\n    setProvider(null);\n  };\n\n  const approveYourself = async () => {\n    if (account) {\n      if (NFTContract && account) {\n        try {\n          NFTContract.methods\n            .setApprovalForAll(\"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\", true)\n            .send({ from: account }, (error, result) => {\n              if (!error) {\n\n              }\n            })\n            .on(\"receipt\", (receipt) => {\n              toast.success(\"Enable Successfully\");\n              setApproveStatus(true)\n            })\n            .on(\"error\", (err) => {\n               toast.error(err);\n            });\n        } catch (error) {\n          console.log(\"Failed: \" + error);\n        }\n      }\n    } else {\n      //toast.error(\"Please connect to your wallet\");\n    }\n  };\n  const approveMutants = async () => {\n    if (account) {\n      if (mutantsContract && account) {\n        try {\n          mutantsContract.methods\n            .setApprovalForAll(\"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\", true)\n            .send({ from: account }, (error, result) => {\n              if (!error) {\n\n              }\n            })\n            .on(\"receipt\", (receipt) => {\n              toast.success(\"Enable Successfully\");\n              setApproveStatus(true)\n            })\n            .on(\"error\", (err) => {\n               toast.error(err);\n            });\n        } catch (error) {\n          console.log(\"Failed: \" + error);\n        }\n      }\n    } else {\n      //toast.error(\"Please connect to your wallet\");\n    }\n  };\n  const approveFrost = async() => {\n    if (Contract && account) {\n      try {\n        Contract.methods\n          .approve(\"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\", Web3.utils.toWei(20000000000, 'ether'))\n          .send({ from: account }, (error, result) => {\n            if (!error) {\n\n            }\n          })\n          .on(\"receipt\", (receipt) => {\n            toast.success(\"Enable Successfully\");\n            setApproveStatus(true)\n          })\n          .on(\"error\", (err) => {\n             toast.error(err);\n          });\n      } catch (error) {\n        console.log(\"Failed: \" + error);\n      }\n    }\n  }\n\n  const checkEnable = async (web3, account) => {\n\n    await NFTContract.methods\n      .isApprovedForAll(account, \"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\")\n      .call((error, result) => {\n        if (!error) {\n          if (result > 0) {\n            setApproveStatus(true)\n            console.log('is approve')\n          } else {\n            setApproveStatus(false)\n            console.log('not approve')\n          }\n        }\n      });\n      await mutantsContract.methods\n      .isApprovedForAll(account, \"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\")\n      .call((error, result) => {\n        if (!error) {\n          if (result > 0) {\n            setMutantsApproveStatus(true)\n            console.log('is approve mutants')\n          } else {\n            setMutantsApproveStatus(false)\n            console.log('not approve mutants')\n          }\n        }\n      });\n      await Contract.methods\n      .allowance(account, \"0x6F8353A25ad9cFA7aEE1Cb8917Ac1351BD3F423B\")\n      .call((error, result) => {\n        if (!error) {\n          if (result > web3.utils.toWei(100, 'ether')) {\n            setFrostApproveStatus(true)\n            console.log('is approve frost')\n          } else {\n            setFrostApproveStatus(false)\n            console.log('not approve frost')\n          }\n        }\n      });\n  };\n\n\n\n  const context = {\n    provider: provider,\n    web3Instance: web3Instance,\n    Contract: Contract,\n    account: account,\n\n\n    handleConnectToWallet: connectToWallet,\n    handleDisconnectWallet: disconnectWallet,\n    invest: invest,\n    investMutants: investMutants,\n    withdraw: withdraw,\n    withdrawMutants: withdrawMutants,\n    approveYourself: approveYourself,\n    approveMutants: approveMutants,\n    approveFrost: approveFrost,\n    checkEnable: checkEnable,\n    unStake: unStake,\n    unStakeMutant: unStakeMutant,\n    investAll:investAll,\n    investAllMutants: investAllMutants,\n    unStakeAll:unStakeAll,\n    unStakeAllMutants: unStakeAllMutants,\n\n\n    walletBalance: walletBalance,\n    babiesStaked: babiesStaked,\n    babiesStakedByUser: babiesStakedByUser,\n    mutantsStaked: mutantsStaked,\n    mutantsStakedByUser: mutantsStakedByUser,\n    approveStatus: approveStatus,\n    mutantsApproveStatus: mutantsApproveStatus,\n    frostApproveStatus: frostApproveStatus,\n    unstakedBabies: unstakedBabies,\n    unstakedMutants: unstakedMutants,\n    babiesReward: babiesReward,\n    mutantsReward: mutantsReward,\n    rewardPerday:rewardPerday,\n    constantReward:constantReward,\n\n\n  };\n  return (\n    <BlockchainContext.Provider value={context}>\n      {props.children}\n    </BlockchainContext.Provider>\n  );\n};\n\nexport default BlockchainContext;\n"]},"metadata":{},"sourceType":"module"}