{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tonio\\\\Desktop\\\\frost website clean original in case i break stuff lol\\\\src\\\\store\\\\BlockchainContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport { providers } from \"../utils/Web3Provider\";\nimport { ABI, NFTABI } from \"../utils/abi\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlockchainContext = /*#__PURE__*/createContext({\n  notification: null,\n  showModal: function () {},\n  hideModal: function () {}\n});\nexport const BlockchainContextProvider = props => {\n  _s();\n\n  const [provider, setProvider] = useState();\n  const [web3Instance, setWeb3Instance] = useState();\n  const [web3Modal, setWeb3Modal] = useState();\n  const [Contract, setContract] = useState();\n  const [account, setAccount] = useState();\n  const [walletBalance, setWalletBalance] = useState(\"0.00000\");\n  const [ischange, setIschange] = useState(true);\n  const [tokenStaked, setTokenStaked] = useState('0');\n  const [tokenStakedByuser, setTokenStakedByUser] = useState('0');\n  const [ownerCount, setOwnerCount] = useState('0');\n  const [nftContract, setNftContract] = useState();\n  const [unstakedNft, setUnstakedNft] = useState();\n  const [stakedNft, setStakedNft] = useState();\n  const [approveStatus, setApproveStatus] = useState(false);\n  const [totalReward, setTotalReward] = useState(0);\n  const [rewardPerday, setRewardPerday] = useState('0');\n  const [constantReward, setConstantReward] = useState('0');\n  useEffect(() => {\n    connectToWallet('noWallet');\n  }, []);\n  useEffect(() => {\n    if (provider && account && web3Instance.currentProvider.isMetaMask === true && ischange) {\n      setIschange(false);\n      provider.on(\"accountsChanged\", accounts => {\n        fetchDataFromContract(Contract, web3Instance, accounts[0], nftContract);\n        accounts.length > 0 && setAccount(accounts[0]);\n      });\n    }\n  });\n\n  const connectToWallet = async type => {\n    if (type === \"noWallet\") {\n      const web3 = new Web3(process.env.REACT_APP_RPF_NODE);\n      const contractInstance = new web3.eth.Contract(ABI, process.env.REACT_APP_CONTRACT);\n      const nftcontractInstance = new web3.eth.Contract(NFTABI, process.env.REACT_APP_NFT_CONTRACT);\n      setNftContract(nftcontractInstance);\n      setContract(contractInstance);\n      setWeb3Instance(web3);\n      setProvider(provider);\n      fetchDataFromContract(contractInstance, web3, null, nftcontractInstance);\n    } else {\n      const web3Modal = new Web3Modal({\n        cacheProvider: true,\n        providerOptions: providers,\n        theme: \"dark\"\n      });\n      let provider;\n      await web3Modal.connect(web3Modal).then(res => {\n        provider = res;\n      }).catch(err => {\n        provider = process.env.REACT_APP_RPF_NODE;\n      });\n      const web3 = new Web3(provider);\n      const account = await web3.eth.getAccounts();\n      const contractInstance = new web3.eth.Contract(ABI, process.env.REACT_APP_CONTRACT);\n      const nftcontractInstance = new web3.eth.Contract(NFTABI, process.env.REACT_APP_NFT_CONTRACT);\n      setContract(contractInstance);\n      setNftContract(nftcontractInstance);\n      account.length > 0 && setAccount(account[0]);\n      setWeb3Instance(web3);\n      setProvider(provider);\n      setWeb3Modal(web3Modal);\n      fetchDataFromContract(contractInstance, web3, account[0], nftcontractInstance);\n      localStorage.setItem('account', account[0]);\n    }\n  };\n\n  const fetchDataFromContract = async (contract, web3, account, NFTcontract) => {\n    if (contract && NFTcontract && !account) {\n      await contract.methods.tokensStaked().call((error, result) => {\n        if (!error) {\n          setTokenStaked(result);\n        }\n      });\n      await contract.methods.amountOfStakers().call((error, result) => {\n        if (!error) {\n          setOwnerCount(result);\n        }\n      });\n    }\n\n    if (contract && account && NFTcontract) {\n      await contract.methods.tokensStaked().call((error, result) => {\n        if (!error) {\n          setTokenStaked(result);\n        }\n      });\n      await contract.methods.balanceOf(account).call((error, result) => {\n        if (!error) {\n          setWalletBalance(web3.utils.fromWei(result));\n        }\n      });\n      await contract.methods.tokensStakedByUser(account).call(async (error, result) => {\n        if (!error) {\n          setTokenStakedByUser(result);\n          await contract.methods.coinAmountPerRewardUnit().call((error, rew) => {\n            if (!error) {\n              const finalRewardPerday = result * rew * 2;\n              setRewardPerday(web3.utils.fromWei(finalRewardPerday.toString()));\n              setConstantReward(web3.utils.fromWei(rew) * 2);\n            }\n          });\n        }\n      });\n      await contract.methods.amountOfStakers().call((error, result) => {\n        if (!error) {\n          setOwnerCount(result);\n        }\n      });\n      await contract.methods.stakedNFTSByUser(account).call((error, result) => {\n        if (!error) {\n          setStakedNft(result);\n        }\n      });\n      await NFTcontract.methods.walletOfOwner(account).call((error, result) => {\n        if (!error) {\n          setUnstakedNft(result);\n        }\n      });\n      checkEnable(web3, account);\n      pendingHarvest(web3, contract, account);\n    }\n  };\n\n  const pendingHarvest = async (web3, contract, account) => {\n    if (account) {\n      await contract.methods.stakedNFTSByUser(account).call((error, result) => {\n        if (!error) {\n          result && result.map(async item => {\n            console.log('here ', item);\n            await contract.methods.pendingRewards(account, item).call((error, res) => {\n              if (!error) {\n                console.log('yes', res);\n                setTotalReward(old => old + +web3.utils.fromWei(res));\n              }\n            });\n          });\n        }\n      });\n    }\n  };\n\n  const invest = async tokenId => {\n    if (account) {\n      await Contract.methods.stake(tokenId).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Stake Successfully\");\n        fetchDataFromContract(Contract, web3Instance, account, nftContract);\n      });\n    }\n  };\n\n  const investAll = async () => {\n    if (account) {\n      console.log(unstakedNft);\n      await Contract.methods.stakeBatch(unstakedNft).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Stake Successfully\");\n        fetchDataFromContract(Contract, web3Instance, account, nftContract);\n      });\n    }\n  };\n\n  const withdraw = async () => {\n    if (account) {\n      await Contract.methods.harvestBatch(account).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Claim Successfully\");\n        fetchDataFromContract(Contract, web3Instance, account, nftContract);\n      });\n    }\n  };\n\n  const unStake = async tokenId => {\n    if (account) {\n      await Contract.methods.unstake(tokenId).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Unstake Successfully\");\n        fetchDataFromContract(Contract, web3Instance, account, nftContract);\n      });\n    }\n  };\n\n  const unStakeAll = async () => {\n    if (account) {\n      await Contract.methods.unstakeBatch(stakedNft).send({\n        from: account\n      }, (error, result) => {\n        if (!error) {}\n      }).on(\"receipt\", function (receipt) {\n        toast.success(\"Unstake Successfully\");\n        fetchDataFromContract(Contract, web3Instance, account, nftContract);\n      });\n    }\n  };\n\n  const disconnectWallet = async () => {\n    await web3Modal.clearCachedProvider();\n    setAccount(null);\n    localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n    localStorage.removeItem(\"walletconnect\");\n    localStorage.removeItem(\"account\");\n    setProvider(null);\n  };\n\n  const approveYourself = async () => {\n    if (account) {\n      if (nftContract && account) {\n        try {\n          nftContract.methods.setApprovalForAll(process.env.REACT_APP_CONTRACT, true).send({\n            from: account\n          }, (error, result) => {\n            if (!error) {}\n          }).on(\"receipt\", receipt => {\n            toast.success(\"Enable Successfully\");\n            setApproveStatus(true);\n          }).on(\"error\", err => {\n            toast.error(err);\n          });\n        } catch (error) {\n          console.log(\"Failed: \" + error);\n        }\n      }\n    } else {//toast.error(\"Please connect to your wallet\");\n    }\n  };\n\n  const checkEnable = async (web3, account) => {\n    const NFTContract = new web3.eth.Contract(NFTABI, process.env.REACT_APP_NFT_CONTRACT);\n    await NFTContract.methods.isApprovedForAll(account, process.env.REACT_APP_CONTRACT).call((error, result) => {\n      if (!error) {\n        if (result > 0) {\n          setApproveStatus(true);\n          console.log('is approve');\n        } else {\n          setApproveStatus(false);\n          console.log('not approve');\n        }\n      }\n    });\n  };\n\n  const context = {\n    provider: provider,\n    web3Instance: web3Instance,\n    Contract: Contract,\n    account: account,\n    walletBalance: walletBalance,\n    handleConnectToWallet: connectToWallet,\n    handleDisconnectWallet: disconnectWallet,\n    invest: invest,\n    withdraw: withdraw,\n    tokenStaked: tokenStaked,\n    tokenStakedByuser: tokenStakedByuser,\n    ownerCount: ownerCount,\n    approveYourself: approveYourself,\n    checkEnable: checkEnable,\n    approveStatus: approveStatus,\n    unStake: unStake,\n    unstakedNft: unstakedNft,\n    stakedNft: stakedNft,\n    totalReward: totalReward,\n    rewardPerday: rewardPerday,\n    constantReward: constantReward,\n    investAll: investAll,\n    unStakeAll: unStakeAll\n  };\n  return /*#__PURE__*/_jsxDEV(BlockchainContext.Provider, {\n    value: context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BlockchainContextProvider, \"stefeXfj+sa1lnDzPxC7e/TaK5Q=\");\n\n_c = BlockchainContextProvider;\nexport default BlockchainContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlockchainContextProvider\");","map":{"version":3,"sources":["C:/Users/Tonio/Desktop/frost website clean original in case i break stuff lol/src/store/BlockchainContext.js"],"names":["createContext","useState","useEffect","Web3","Web3Modal","providers","ABI","NFTABI","toast","BlockchainContext","notification","showModal","hideModal","BlockchainContextProvider","props","provider","setProvider","web3Instance","setWeb3Instance","web3Modal","setWeb3Modal","Contract","setContract","account","setAccount","walletBalance","setWalletBalance","ischange","setIschange","tokenStaked","setTokenStaked","tokenStakedByuser","setTokenStakedByUser","ownerCount","setOwnerCount","nftContract","setNftContract","unstakedNft","setUnstakedNft","stakedNft","setStakedNft","approveStatus","setApproveStatus","totalReward","setTotalReward","rewardPerday","setRewardPerday","constantReward","setConstantReward","connectToWallet","currentProvider","isMetaMask","on","accounts","fetchDataFromContract","length","type","web3","process","env","REACT_APP_RPF_NODE","contractInstance","eth","REACT_APP_CONTRACT","nftcontractInstance","REACT_APP_NFT_CONTRACT","cacheProvider","providerOptions","theme","connect","then","res","catch","err","getAccounts","localStorage","setItem","contract","NFTcontract","methods","tokensStaked","call","error","result","amountOfStakers","balanceOf","utils","fromWei","tokensStakedByUser","coinAmountPerRewardUnit","rew","finalRewardPerday","toString","stakedNFTSByUser","walletOfOwner","checkEnable","pendingHarvest","map","item","console","log","pendingRewards","old","invest","tokenId","stake","send","from","receipt","success","investAll","stakeBatch","withdraw","harvestBatch","unStake","unstake","unStakeAll","unstakeBatch","disconnectWallet","clearCachedProvider","removeItem","approveYourself","setApprovalForAll","NFTContract","isApprovedForAll","context","handleConnectToWallet","handleDisconnectWallet","children"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport { providers } from \"../utils/Web3Provider\";\nimport { ABI, NFTABI } from \"../utils/abi\";\nimport { toast } from \"react-toastify\";\n\nconst BlockchainContext = createContext({\n  notification: null,\n  showModal: function () { },\n  hideModal: function () { },\n});\n\nexport const BlockchainContextProvider = (props) => {\n  const [provider, setProvider] = useState();\n  const [web3Instance, setWeb3Instance] = useState();\n  const [web3Modal, setWeb3Modal] = useState();\n  const [Contract, setContract] = useState();\n  const [account, setAccount] = useState();\n  const [walletBalance, setWalletBalance] = useState(\"0.00000\");\n  const [ischange, setIschange] = useState(true)\n  const [tokenStaked, setTokenStaked] = useState('0')\n  const [tokenStakedByuser, setTokenStakedByUser] = useState('0')\n  const [ownerCount, setOwnerCount] = useState('0')\n  const [nftContract, setNftContract] = useState()\n  const [unstakedNft, setUnstakedNft] = useState()\n  const [stakedNft, setStakedNft] = useState()\n  const [approveStatus, setApproveStatus] = useState(false)\n  const [totalReward, setTotalReward] = useState(0)\n  const [rewardPerday, setRewardPerday] = useState('0')\n  const [constantReward, setConstantReward] = useState('0')\n\nuseEffect(()=>{\n  connectToWallet('noWallet')\n},[])\n  useEffect(() => {\n    if (provider && account && web3Instance.currentProvider.isMetaMask === true && ischange) {\n      setIschange(false)\n      provider.on(\"accountsChanged\", (accounts) => {\n        fetchDataFromContract(Contract, web3Instance, accounts[0],nftContract);\n        accounts.length > 0 && setAccount(accounts[0]);\n      });\n    }\n  });\n\n  const connectToWallet = async (type) => {\n    if (type === \"noWallet\") {\n      const web3 = new Web3(process.env.REACT_APP_RPF_NODE);\n      const contractInstance = new web3.eth.Contract(\n        ABI,\n        process.env.REACT_APP_CONTRACT\n      );\n      const nftcontractInstance = new web3.eth.Contract(\n        NFTABI,\n        process.env.REACT_APP_NFT_CONTRACT\n      );\n      setNftContract(nftcontractInstance)\n      setContract(contractInstance);\n      setWeb3Instance(web3);\n      setProvider(provider);\n      fetchDataFromContract(contractInstance, web3, null, nftcontractInstance);\n    } else {\n      const web3Modal = new Web3Modal({\n        cacheProvider: true,\n        providerOptions: providers,\n        theme: \"dark\",\n      });\n      let provider;\n      await web3Modal\n        .connect(web3Modal)\n        .then((res) => {\n          provider = res;\n        })\n        .catch((err) => {\n          provider = process.env.REACT_APP_RPF_NODE;\n        });\n      const web3 = new Web3(provider);\n      const account = await web3.eth.getAccounts();\n      const contractInstance = new web3.eth.Contract(\n        ABI,\n        process.env.REACT_APP_CONTRACT\n      );\n      const nftcontractInstance = new web3.eth.Contract(\n        NFTABI,\n        process.env.REACT_APP_NFT_CONTRACT\n      );\n      setContract(contractInstance);\n      setNftContract(nftcontractInstance)\n      account.length > 0 && setAccount(account[0]);\n      setWeb3Instance(web3);\n      setProvider(provider);\n      setWeb3Modal(web3Modal);\n      fetchDataFromContract(contractInstance, web3, account[0], nftcontractInstance);\n      localStorage.setItem('account', account[0])\n    }\n\n  };\n\n  const fetchDataFromContract = async (contract, web3, account, NFTcontract) => {\n    if (contract && NFTcontract && !account) {\n      await contract.methods.tokensStaked().call((error, result) => {\n        if (!error) {\n          setTokenStaked(result)\n        }\n      });\n      await contract.methods.amountOfStakers().call((error, result) => {\n        if (!error) {\n          setOwnerCount(result)\n        }\n      });\n    }\n    if (contract && account && NFTcontract) {\n      await contract.methods.tokensStaked().call((error, result) => {\n        if (!error) {\n          setTokenStaked(result)\n        }\n      });\n      await contract.methods.balanceOf(account).call((error, result) => {\n        if (!error) {\n          setWalletBalance(web3.utils.fromWei(result))\n        }\n      });\n      await contract.methods.tokensStakedByUser(account).call(async(error, result) => {\n        if (!error) {\n          setTokenStakedByUser(result)\n          await contract.methods.coinAmountPerRewardUnit().call((error, rew) => {\n            if (!error) {\n              const finalRewardPerday = result * rew * 2\n              setRewardPerday(web3.utils.fromWei(finalRewardPerday.toString()))\n              setConstantReward(web3.utils.fromWei(rew) * 2)\n            }\n          });\n        }\n      });\n      await contract.methods.amountOfStakers().call((error, result) => {\n        if (!error) {\n          setOwnerCount(result)\n        }\n      });\n      await contract.methods.stakedNFTSByUser(account).call((error, result) => {\n        if (!error) {\n          setStakedNft(result)\n        }\n      });\n      await NFTcontract.methods.walletOfOwner(account).call((error, result) => {\n        if (!error) {\n          setUnstakedNft(result)\n        }\n      });\n\n      checkEnable(web3, account)\n      pendingHarvest(web3, contract, account)\n    }\n  };\n\n  const pendingHarvest = async (web3, contract, account) => {\n    if (account) {\n      await contract.methods.stakedNFTSByUser(account).call((error, result) => {\n        if (!error) {\n          result && result.map(async (item) => {\n            console.log('here ', item)\n            await contract.methods.pendingRewards(account,item).call((error, res) => {\n              if (!error) {\n                console.log('yes', res)\n                setTotalReward(old => old + +(web3.utils.fromWei(res)))\n              }\n            });\n          })\n        }\n      });\n    }\n  };\n\n\n  const invest = async (tokenId) => {\n    if (account) {\n      await Contract.methods\n        .stake(tokenId)\n        .send(\n          { from: account },\n          (error, result) => {\n            if (!error) {\n            }\n          }\n        )\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Stake Successfully\");\n          fetchDataFromContract(Contract, web3Instance, account,nftContract);\n        });\n    }\n  };\n\n  const investAll = async () => {\n    if (account) {\n      console.log(unstakedNft)\n      await Contract.methods\n        .stakeBatch(unstakedNft)\n        .send(\n          { from: account },\n          (error, result) => {\n            if (!error) {\n            }\n          }\n        )\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Stake Successfully\");\n          fetchDataFromContract(Contract, web3Instance, account,nftContract);\n        });\n    }\n  };\n\n  const withdraw = async () => {\n    if (account) {\n      await Contract.methods\n        .harvestBatch(account)\n        .send({ from: account }, (error, result) => {\n          if (!error) {\n          }\n        })\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Claim Successfully\");\n          fetchDataFromContract(Contract, web3Instance, account,nftContract);\n        });\n    }\n  };\n\n  const unStake = async (tokenId) => {\n    if (account) {\n      await Contract.methods\n        .unstake(tokenId)\n        .send({ from: account }, (error, result) => {\n          if (!error) {\n          }\n        })\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Unstake Successfully\");\n          fetchDataFromContract(Contract, web3Instance, account,nftContract);\n        });\n    }\n  };\n\n  const unStakeAll = async () => {\n    if (account) {\n      await Contract.methods\n        .unstakeBatch(stakedNft)\n        .send({ from: account }, (error, result) => {\n          if (!error) {\n          }\n        })\n        .on(\"receipt\", function (receipt) {\n          toast.success(\"Unstake Successfully\");\n          fetchDataFromContract(Contract, web3Instance, account,nftContract);\n        });\n    }\n  };\n\n\n  const disconnectWallet = async () => {\n    await web3Modal.clearCachedProvider();\n    setAccount(null);\n    localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n    localStorage.removeItem(\"walletconnect\");\n    localStorage.removeItem(\"account\")\n    setProvider(null);\n  };\n\n  const approveYourself = async () => {\n    if (account) {\n      if (nftContract && account) {\n        try {\n          nftContract.methods\n            .setApprovalForAll(process.env.REACT_APP_CONTRACT, true)\n            .send({ from: account }, (error, result) => {\n              if (!error) {\n\n              }\n            })\n            .on(\"receipt\", (receipt) => {\n              toast.success(\"Enable Successfully\");\n              setApproveStatus(true)\n            })\n            .on(\"error\", (err) => {\n               toast.error(err);\n            });\n        } catch (error) {\n          console.log(\"Failed: \" + error);\n        }\n      }\n    } else {\n      //toast.error(\"Please connect to your wallet\");\n    }\n  };\n\n  const checkEnable = async (web3, account) => {\n    const NFTContract = new web3.eth.Contract(\n      NFTABI,\n      process.env.REACT_APP_NFT_CONTRACT\n    );\n    await NFTContract.methods\n      .isApprovedForAll(account, process.env.REACT_APP_CONTRACT)\n      .call((error, result) => {\n        if (!error) {\n          if (result > 0) {\n            setApproveStatus(true)\n            console.log('is approve')\n          } else {\n            setApproveStatus(false)\n            console.log('not approve')\n          }\n        }\n      });\n  };\n\n\n\n  const context = {\n    provider: provider,\n    web3Instance: web3Instance,\n    Contract: Contract,\n    account: account,\n    walletBalance: walletBalance,\n    handleConnectToWallet: connectToWallet,\n    handleDisconnectWallet: disconnectWallet,\n    invest: invest,\n    withdraw: withdraw,\n    tokenStaked: tokenStaked,\n    tokenStakedByuser: tokenStakedByuser,\n    ownerCount: ownerCount,\n    approveYourself: approveYourself,\n    checkEnable: checkEnable,\n    approveStatus: approveStatus,\n    unStake: unStake,\n    unstakedNft: unstakedNft,\n    stakedNft: stakedNft,\n    totalReward:totalReward,\n    rewardPerday:rewardPerday,\n    constantReward:constantReward,\n    investAll:investAll,\n    unStakeAll:unStakeAll,\n\n  };\n  return (\n    <BlockchainContext.Provider value={context}>\n      {props.children}\n    </BlockchainContext.Provider>\n  );\n};\n\nexport default BlockchainContext;\n"]},"metadata":{},"sourceType":"module"}